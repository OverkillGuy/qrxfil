#+TITLE: qrxfil

Exfiltrate files via QR codes.

Splits files across multiple QR codes for "sending" across air-gapped
computer systems. Generates numbered PNG files to scan.

The codes contain metadata about chunk number (e.g. "007 of 178") to
enable out-of-order scanning.


#+caption: qrxfil sample workflow in airgapped environment
[[file:qrxfil_description.png]]


* Dependencies

=qrxfil= is built in Rust, relying on:
- [[https://crates.io/crates/base64][base64]], to encode binary in ASCII characters
- [[https://crates.io/crates/qrcode][qrcode]], to generate the codes themselves

This is a toy project meant to learn Rust, for which a Bash proof of
concept was built as reference, see the =scripts/= folder.


* Installation

Use =cargo deb= to generate a Debian package on linux that provides the
=qrxfil= command.

#+begin_src shell
cargo deb
sudo dpkg -i target/debian/qrxfil_0.1.0_amd64.deb
#+end_src

* Usage

To generate QR chunks for exfiltration:

#+begin_src shell
qrxfil exfil file_to_exfil.txt qr_output_folder/
#+end_src

Once these QR images are scanned (on your own), we can reconstruct the
file from a newline-delimited chunk file:

#+begin_src shell
qrxfil restore newline_delimited_chunks.txt restored_file.txt
#+end_src


* Development

Because =rust=, use =cargo= to build the binary

#+begin_src shell
cargo build
#+end_src

Run tests:

#+begin_src shell
cargo test
#+end_src

This project uses [[https://pre-commit.com/][pre-commit]] to enforce code guidelines.

* FAQ

** Why build this?

Most simply: To get a toy project to learn Rust with!

But also because I like local-first solutions: Why upload stuff to The
Cloudâ„¢ when you're just trying to send <1MB files across the room?

My usecase started with synchronizing my [[https://wiki.archlinux.org/index.php/Dotfiles][dotfiles]] across computers,
but without using Github. This led me to learn about how [[https://git-scm.com/book/en/v2/Git-Tools-Bundling][git bundling]]
works, sending file-dumps of a repo, branch or commit, moving it like
files on a USB stick. I looked to using bluetooth for that, which
worked OK (had to pretend these were "PDFs" for "security reasons")
and thought "what are other creative ways to send data?".

There are a lot of options for "covert channels" and side-channels to
exploit, but I felt QR codes have the unique advantage of being
clearly recognizeable by users ("that thing like at the bus stop"),
but not clearly identified with "carrying data" beyond URLs.

I built a prototype in bash in an afternoon, using =split= and =qrencode=,
adding chunk identifying prefix. Another motivation is critical file
paper backups, such as GPG key backups on paper for physical copies.
See [[https://github.com/OverkillGuy/qrxfil/issues/11][feature request #11]] for details.

** If I can bring qrxfil inside an air-gapped fence, why not send back data via that channel instead of QR codes?

I don't have a good answer, you caught me: this isn't really a
security tool, just a fun prototype to send < 1MB of data across two
computers in a fun way.

If I really had to defend this, I'd say that my usecase is "work
computers" where you're trusted enough to write code on (including
getting a compiler and going on the internet) but with basic network
auditing in place to detect foreign network connections, and using SSH
to connect to your home computer from local wifi would be too obvious.

The "data exfiltration" aspect of this project is just a gimmick to
get people to think about security implications of data exfiltration,
and it's just a fun mis-application of technology.


* License

This project uses GPL-v3-or-later license, see file =LICENSE.txt=
